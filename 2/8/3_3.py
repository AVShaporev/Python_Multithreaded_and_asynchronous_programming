# Для закрепления особенностей работы методов модифицируем наш пример, добавив вывод значения, возвращаемого методом acquire и значения внутреннего счетчика семафора, обращаясь к защищенному атрибуту _value:

import threading
import time


def task(sema: threading.Semaphore, text):
    s = sema.acquire(blocking=True, timeout=3)
    print(f"thread id = {threading.current_thread().ident} print {text}, acquire={s}, value= {sema._value}")
    time.sleep(1)
    sema.release()


semaphore = threading.Semaphore(2)

thr = []
for i in range(20):
    thr.append(threading.Thread(target=task, args=(semaphore, i)))
for t in thr:
    t.start()

for t in thr:
    t.join()

print(semaphore._value)


'''
Во время выполнения будет происходить следующее:

первые два потока поднимут семафор, вызов метода acquire для них не будет блокирующим, метод сразу вернет True. При этом первый поток уменьшит внутренний счетчик на 1 и в первой строке печати мы увидим value= 1. Второй поток тоже уменьшит внутренний счетчик еще на 1 и во второй строке мы будем наблюдать value= 0.
как только первый поток опустит семафор вызвав метод release, тут же следующий на очереди поток поднимет семафор и такое поочередное пробуждение потоков продолжится. При этом в каждый момент времени будут выполняться два потока, пока
не пройдет таймер, после которого все ожидающие потоки выйдут из блокировки метода acquire (метод наконец вернет False) и сразу все распечатают свою строку где укажут что acquire=False (выполнились без поднятия семафора) и внутренний счетчик value= 0.
в конце мы увидим новое состояние внутреннего счетчика 14. Каждый из 12 потоков без поднятия семафора по таймеру выполнил метод release (+1 к счетчику) и два потока выполнили release после того как отработали задачу с поднятым семафором.
(из-за не гарантированности точной работы таймаутов и разрешения одновременной работы двух потоков, Вы можете наблюдать эффект состояния гонки, проявляющейся в отсутствии перевода печати на новую строку, а также, возможно, другого итогового значения внутреннего счетчика, например 15 или 16)
'''